# Define a block for managing HTTP-specific configurations
http {
    # Define an upstream group for API version 1. This groups servers that handle requests for version 1 of the API.
    upstream v1_backend {
        server 192.168.1.101; # IP address of the server that handles version 1 of the API
    }

    # Define an upstream group for API version 2. This groups servers that handle requests for version 2 of the API.
    upstream v2_backend {
        server 192.168.1.102; # IP address of the server that handles version 2 of the API
    }

    # Define a server block that listens on port 80 (default HTTP port).
    server {
        listen 80;

        # Define a location block that matches all requests.
        location / {
            # Set the Host header of the proxied request to match the host header of the original request.
            proxy_set_header Host $host;

            # Dynamically define the upstream group to proxy requests to. Initial default is v1_backend.
            set $upstream v1_backend; # Set the default upstream to version 1 backend

            # Check the incoming request for a specific custom header ('X-API-Version').
            # If it equals '2.0', change the upstream group to the one handling API version 2.
            if ($http_x_api_version = '2.0') {
                set $upstream v2_backend; # If header matches '2.0', set the upstream to version 2 backend
            }

            # Proxy the request to the upstream server group defined by the $upstream variable.
            # This could be either v1_backend or v2_backend depending on the header.
            proxy_pass http://$upstream;
        }
    }
}
